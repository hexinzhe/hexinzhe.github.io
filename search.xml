<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>为什么要开始写博客</title>
      <link href="/2018/11/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么之前不写博客"><a href="#为什么之前不写博客" class="headerlink" title="为什么之前不写博客"></a>为什么之前不写博客</h2><p>很久之前（2016）建立了 hexo 博客，但是一直没用。这是因为在当时觉得自己没什么积累，不应该写博客。我见多了网上的流水账博客，自己写的笔记没头没尾没讲解的，就直接 po 到网上了，这种博客除了干扰人搜索之外，没有任何用处。我对这种低质的笔记博客是深恶痛绝的，甚至我都怀疑对于博主自己能有多大用。等一年两年过去，再看这种没头没尾的笔记，只有流水账记录，缺乏分析的笔记，真的还能想起多少有用的吗？<br>因为不想成为这种低质量的垃圾生产者，当然也存在羞于表达的因素，我没有写博客，而只是记笔记。在记笔记的时候，我也会想象着我是在教别人，希望尽可能做到讲解完整，有头有尾，条理清晰。之前我觉得，这也就够了。</p><h2 id="那又为什么改变主意了呢？"><a href="#那又为什么改变主意了呢？" class="headerlink" title="那又为什么改变主意了呢？"></a>那又为什么改变主意了呢？</h2><p>但是我渐渐意识到，这不够，有几点因素<br><a id="more"></a></p><ol><li>笔记永远是笔记，别人看不到。所以总有一些自己表达上的便利，自觉不自觉的就会略过某些细节不表。经年累月，自己再看的时候，也会产生疑惑。而如果写成博客，（可能）会有人去问，也就能形成一个记录，同时也助于改善自己行文。</li><li>假想是教别人的笔记，和真是给别人看的博客，写起来感觉是不同的。对于暴露在外的东西，一定会更加认真，更加细心，反复思量。这对于自己的知识梳理和回顾会有更大帮助。</li><li>得到大众的反馈。自己写的好的，不好的点，自己说对的，说错的，都（可能）会得到反馈。吸取大家的意见来获得成长，是尤为重要的。</li><li>记录自己的成长。博客不仅仅是用来记笔记，很多人都会用博客来记录自己的观点和想法。这种想法对与不对，也会形成大家的辩论，自己总能从中收获一些，改进自己的观点。几年后再来看看，就可以看到自己成长的过程。</li><li>锻练自己的表达能力，对于我们整天坐在电脑前技术人员，表达能力往往比较欠缺。写作是一种特殊的人与人的交流，对于锻练表达能力来说太重要了。</li></ol><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>基于我刚开始不写博客和现在要写博客的原因，我有几项写博客的原则：</p><ol><li>要写有思考的文章。目前深度思考 4 个字我还是不敢自称的，但是写的文章一定是经过了自己思考的，有自己的内容。</li><li>要写对别人有帮助的文章。写博客就是为了向外界输送自己的观点，内容，所以一定要对别人有帮助，才会有人看。</li><li>要写通俗易懂的文章。能将复杂的东西变简单才是本事，这个道理大家都懂，但做起来就难了。我会尽力去做，这需要长久的练习。</li><li>要写不容易过时的文章。越是有思想的内容越不容易过时，越底层越不容易过时，反之亦然。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 观点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用dropbox和服务器搭键hexo自动部署环境</title>
      <link href="/2016/06/15/%E6%90%AD%E5%BB%BAhexo%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2016/06/15/%E6%90%AD%E5%BB%BAhexo%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>刚刚搭建了hexo博客，托管在Git Page和Coding上，感觉良好。但是hexo写完文章后，需要在电脑上生成，发布。比起动态博客可在多平台发布来说，实在麻烦。<br>无意中看到<a href="http://lucifr.com/2013/06/02/hexo-on-cloud-with-dropbox-and-vps/" target="_blank" rel="noopener">Hexo 服务器端布署及 Dropbox 同步</a>这篇文章，眼前一亮，原来静态博客还能这样玩。虽然他是把博客部署到服务器上，而我是把博客托管在Git Page上，但是主体思路是相通的，只需经过简单的修改就能为我所用。</p><p>说做就做吧。<br><a id="more"></a></p><blockquote><p>本文主要讲述了如何通过多种设备(PC，MAC，IOS，Andriod)远程撰写及发布基于<code>hexo</code>系统的博客。<br>工作流程是: 远程撰写，然后通过 Dropbox 同步文章到装有 hexo 构建环境的电脑上，再自动触发 <code>hexo d -g</code> 命令生成网站并发布。<br>推荐将 hexo 构建环境安装在 VPS 或者专用服务器上，或者一台常开并可以访问外网的电脑上。如果是多人使用的电脑，强烈建议安装一个 Linux 的虚拟机，在虚拟机中配置 hexo 构建环境。给虚拟机设上密码，保证您的信息安全。虚拟机还能带来一定程度的移动性。</p></blockquote><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>本方案搭建完成后高度自动化，但是需要一些前提条件:</p><ul><li>一台linux电脑，<strong>512M内存起</strong><br>  我使用的是一家美国vps，512m内存，一年70。比起服务器部署而言，此种方案对服务器所在地域，带宽质量没有要求，只要能连接Dropbox既可，所以越便宜越好。不过由于Dropbox<strong>占用内存过大</strong>，<strong>不推荐</strong>512M以下的vps。已经有512M以下的朋友可以一试，没有的话推荐直接上512M的。</li><li>国内访问Dropbox当然需要翻墙工具了</li><li>需要将hexo目录放置在Dropbox内</li></ul><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><ol><li>通过各种支持Dropbox的设备写文章</li><li>Dropbox自动同步到已经搭建好hexo环境的服务器上</li><li>构建环境通过一定手段监听<code>hexo/source/_post</code>目录的变化，发现变更后就触发<code>hexo d -g</code> 命令自动部署到Git Page和Coding上</li></ol><p>关键在于第三步。<br>此处借用<a href="http://opoo.org/octopress-remote-blogging/" target="_blank" rel="noopener">Alex Lin 的方案</a>，通过<a href="https://github.com/seb-m/pyinotify" target="_blank" rel="noopener">Pyinotify</a>来进行监听操作。</p><h2 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h2><blockquote><p>本文下面的示例、代码等都是以<code>CentOS  6</code>做为构建环境的。</p></blockquote><h3 id="1-安装配置hexo"><a href="#1-安装配置hexo" class="headerlink" title="1. 安装配置hexo"></a>1. 安装配置hexo</h3><p>安装很简单，请自行Google吧。我仅仅说一点，因为是通过Dropbox同步的，所以hexo目录需要放置在Dropbox目录。</p><h3 id="2-安装配置Dropbox"><a href="#2-安装配置Dropbox" class="headerlink" title="2. 安装配置Dropbox"></a>2. 安装配置Dropbox</h3><p>下载安装 Dropbox 32-bit:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86&quot; | tar xzf -</span><br></pre></td></tr></table></figure></p><p>64-bit:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86\_64&quot; | tar xzf -</span><br></pre></td></tr></table></figure></p><p>接着，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#~/.dropbox-dist/dropboxd</span><br></pre></td></tr></table></figure></p><p>启动后会提示 Dropbox 客户端还没有链接到相关账户，并显示一个链接，如 <a href="https://www.dropbox.com/cli\_linux?host\_id=XXXXXX" target="_blank" rel="noopener">https://www.dropbox.com/cli\_linux?host\_id=XXXXXX</a> ，<strong>复制链接到浏览器</strong>（不一定是构建环境所在的电脑），登录 Dropbox，此时在构建环境的电脑的 /root 目录中将会产生 Dropbox 目录，并且已经同步了 Dropbox 中的内存到该目录。这个登录链接过程一般只需要做一次，如果以后启动 Dropbox 还提示需要链接，做同样操作即可。<br>登录上之后，将该进程停掉。接着，下载 Dropbox 控制脚本，便于我们管理 Dropbox。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#cd ~</span><br><span class="line">#wget http://www.dropbox.com/download?dl=packages/dropbox.py</span><br><span class="line">#chmod +x dropbox.py</span><br></pre></td></tr></table></figure><p>可以使用以下命令启动、停止和查看 Dropbox 状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#~/dropbox.py start</span><br><span class="line">#~/dropbox.py stop</span><br><span class="line">#~/dropbox.py status</span><br></pre></td></tr></table></figure></p><p>最后，一定要将hexo目录放进Dropbox。<br>如果hexo本来是本地生成的，请<strong>确保Nodejs版本以及hexo版本和vps端一致，不然可能会出问题</strong>。最好的解决方式是在vps端再初始化一个hexo，放置在Dropbox内，然后从本地将关键配置文件和博客文本替换即可。</p><h3 id="3-编写调用hexo的脚本"><a href="#3-编写调用hexo的脚本" class="headerlink" title="3. 编写调用hexo的脚本"></a>3. 编写调用hexo的脚本</h3><p>此处假设hexo在<code>/root/Dropbox/Hexo</code>内</p><p>文件路径<code>/root/hexogene.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line">cd /root/Dropbox/Hexo</span><br><span class="line">/root/.nvm/versions/node/v4.4.5/bin/hexo cl</span><br><span class="line">/root/.nvm/versions/node/v4.4.5/bin/hexo d -g</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>:请通过which hexo查找hexo路径<br>这个脚本可能还需要修改才能在你的机子上正确运行，请自行测试，测试成功后再进行下一步</p></blockquote><h3 id="4-安装配置Pyinotify"><a href="#4-安装配置Pyinotify" class="headerlink" title="4. 安装配置Pyinotify"></a>4. 安装配置Pyinotify</h3><p>利用 Linux 的 inotify 机制，可以很轻松的监听文件系统的变化。<a href="https://github.com/seb-m/pyinotify" target="_blank" rel="noopener">Pyinotify</a> 是 inotify 的 Python 语言的实现版本。<br>安装要求</p><blockquote><p>Linux 内核版本 ≥ 2.6.13<br>Python 版本 ≥ 2.4 (including Python 3.x)</p></blockquote><p>由于在之前的安装过程中已经安装了 git 和 python，这里可以调用以下命令安装 Pyinotify<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#cd ~</span><br><span class="line">#git clone git://github.com/seb-m/pyinotify.git</span><br><span class="line">#cd pyinotify</span><br><span class="line">#python setup.py install</span><br></pre></td></tr></table></figure></p><h3 id="5-编写hexowatcher程序"><a href="#5-编写hexowatcher程序" class="headerlink" title="5. 编写hexowatcher程序"></a>5. 编写hexowatcher程序</h3><p>安装完Pyinotify后我们写一个Python脚本来监听<code>hexo</code>相应目录的变化。这是本工作流最核心的部分。<br>文件路径<code>/root/hexowatcher.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyinotify</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">HEXO_RAKE_SHELL=<span class="string">"/root/hexogene.sh"</span></span><br><span class="line">WATCH_TARGET=<span class="string">"/root/Dropbox/Hexo/source/_posts"</span></span><br><span class="line">WATCH_FILE=<span class="string">"/root/Dropbox/Hexo/source/_posts/trigger.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkevent</span><span class="params">(eventname, pathname)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> pathname == WATCH_FILE:</span><br><span class="line">        <span class="comment">#print eventname, ": /root/Dropbox/Hexo/source/_posts/trigger.txt changed, call rake ..."</span></span><br><span class="line">        p = subprocess.Popen(HEXO_RAKE_SHELL, close_fds=<span class="keyword">True</span>, bufsize=<span class="number">1</span>, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line">        p.communicate()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HexoSourceModifyHandler</span><span class="params">(pyinotify.ProcessEvent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_IN_ATTRIB</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="comment">#print "ATTRIB event:", event.pathname</span></span><br><span class="line">        checkevent(<span class="string">"ATTRIB"</span>, event.pathname)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_IN_MODIFY</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="comment">#print "MODIFY event:", event.pathname</span></span><br><span class="line">        checkevent(<span class="string">"MODIFY"</span>, event.pathname)</span><br><span class="line">          </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    wm = pyinotify.WatchManager()</span><br><span class="line">    <span class="comment">#pyinotify.IN_MODIFY, pyinotify.ALL_EVENTS</span></span><br><span class="line">    wm.add_watch(WATCH_TARGET, pyinotify.IN_ATTRIB + pyinotify.IN_MODIFY, rec=<span class="keyword">True</span>)</span><br><span class="line">      </span><br><span class="line">    eh = HexoSourceModifyHandler()</span><br><span class="line"> </span><br><span class="line">    notifier = pyinotify.Notifier(wm, eh)</span><br><span class="line">    <span class="comment">#notifier = pyinotify.Notifier(wm); </span></span><br><span class="line">    notifier.loop() </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>在后台运行该程序:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#~/hexowatcher.py &amp;</span><br></pre></td></tr></table></figure></p><blockquote><p>还有一点需要注意的就是，脚本中只监听了_post中一个<code>trigger.txt</code>文件，而并没有监听整个目录。<br>是因为，如果监听整个目录，当文章还没有写完就保存时，Dropbox同步后上面的程序就会执行，这样会导致还没有写完的文章发布出去。<br>所以目前的解决方法是，文章写完之后修改一下 trigger.txt 的文件（随便该点啥）并保存，系统监听到 trigger.txt 的变化才执行构建命令。</p></blockquote><h3 id="6-检查"><a href="#6-检查" class="headerlink" title="6. 检查"></a>6. 检查</h3><p>到这一步已经搭建完成，然后测试一下，在本地打开Dropbox的hexo目录，随便修改些什么，然后新建一个trigger.txt（要在Dropbox的<code>hexo/source/_posts</code>目录下建立）。然后等上半分钟，如果没有问题，就会看到Dropbox变成了同步状态。然后打开自己的Git Page，查看修改是否上传。<br>之后可以用手机或ipad进行测试，登录移动版Dropbox，在_posts目录上编写文章，写完修改一下trigger.txt。然后停两分钟查看Git Page是否更新了。</p><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li>要花钱<br>  对于很多人来说，用Git Page的原因就是因为不用花钱，虽然我这个方案花钱不多，但毕竟不免费。</li><li>不太优雅<br>  修改trigger的方式实在是。。。很怪异。</li><li>如果只有ulysses，或者只想用ulysses的人士（此处指iOS端）<br>  因其没有Dropbox同步，想上传文章以及修改trigger文件方式就太麻烦了，我目前可以提供一种思路，将这些操作变的简单一些。<br>前提：<ul><li>神器workflow</li><li>ulysses<br>  思路很简单，就是用workflow做一个工作流，可以实现将文章上传到<code>hexo/_posts</code>目录，并自动修改trigger.txt实现触发generate。通过workflow的share功能，可以在ulysses的分享界面将md文件传送给workflow，也就能够实现整个工作流的运转。<br>因离本题较远，不再多说了。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> hexo </tag>
            
            <tag> dropbox </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
